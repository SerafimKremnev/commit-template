const inquirer = require('inquirer');
const simpleGit = require('simple-git');
const chalk = require('chalk');
const path = require('path');
const fs = require('fs');

const { loadConfig } = require('./config');
const { formatCommitMessage } = require('./formatter');

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —É—Ç–∏–ª–∏—Ç—ã –∫–æ–º–º–∏—Ç–æ–≤
 */
async function runCommit() {
  try {
    console.log(chalk.blue('üöÄ –ó–∞–ø—É—Å–∫ —É—Ç–∏–ª–∏—Ç—ã –∫–æ–º–º–∏—Ç–æ–≤...\n'));
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è git
    const git = simpleGit();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º—ã –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    const isRepo = await git.checkIsRepo();
    if (!isRepo) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –ø–∞–ø–∫–µ —Å git –ø—Ä–æ–µ–∫—Ç–æ–º.');
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤–µ—Ç–∫–∏
    const currentBranch = await git.branch();
    console.log(chalk.green(`üìç –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: ${currentBranch.current}\n`));
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const config = await loadConfig();
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const status = await git.status();
    if (status.files.length === 0) {
      console.log(chalk.yellow('‚ö†Ô∏è  –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞'));
      return;
    }
    
    console.log(chalk.cyan('üìù –ò–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∫–æ–º–º–∏—Ç–∞:'));
    status.files.forEach(file => {
      const status = file.working_dir === 'M' ? 'modified' : 
                    file.working_dir === 'A' ? 'added' : 
                    file.working_dir === 'D' ? 'deleted' : 'unknown';
      console.log(`  ${chalk.gray(status)} ${file.path}`);
    });
    console.log('');
    
    // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å
    const answers = await promptUser(config, currentBranch.current);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–∞
    const commitMessage = formatCommitMessage(answers, config, currentBranch.current);
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞
    const { confirm } = await inquirer.prompt([
      {
        type: 'confirm',
        name: 'confirm',
        message: `–°–æ–∑–¥–∞—Ç—å –∫–æ–º–º–∏—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º:\n\n${chalk.cyan(commitMessage)}\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`,
        default: true
      }
    ]);
    
    if (!confirm) {
      console.log(chalk.yellow('‚ùå –ö–æ–º–º–∏—Ç –æ—Ç–º–µ–Ω–µ–Ω'));
      return;
    }
    
    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞
    await git.commit(commitMessage);
    console.log(chalk.green('‚úÖ –ö–æ–º–º–∏—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!'));
    
  } catch (error) {
    console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞:'), error.message);
    throw error;
  }
}

/**
 * –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function promptUser(config, currentBranch) {
  const questions = [];
  
  // –¢–∏–ø –∫–æ–º–º–∏—Ç–∞
  questions.push({
    type: 'list',
    name: 'type',
    message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–º–º–∏—Ç–∞:',
    choices: config.types || [
      { name: '‚ú® feat: –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è', value: 'feat' },
      { name: 'üêõ fix: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–≥–∞', value: 'fix' },
      { name: 'üìù docs: –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è', value: 'docs' },
      { name: 'üíÑ style: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞', value: 'style' },
      { name: '‚ôªÔ∏è refactor: —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥', value: 'refactor' },
      { name: '‚ö° perf: —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', value: 'perf' },
      { name: '‚úÖ test: —Ç–µ—Å—Ç—ã', value: 'test' },
      { name: 'üîß chore: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', value: 'chore' }
    ]
  });

  // ID –∑–∞–¥–∞—á–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π, —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)
  questions.push({
    type: 'input',
    name: 'taskId',
    message: 'ID –∑–∞–¥–∞—á–∏ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):',
    validate: (input) => {
      if (!input.trim()) return 'ID –∑–∞–¥–∞—á–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
      if (!/^\d+$/.test(input.trim())) return 'ID –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã';
      return true;
    }
  });

  // –û–±–ª–∞—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π
  if (config.scopes && config.scopes.length > 0) {
    questions.push({
      type: 'list',
      name: 'scope',
      message: '–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π:',
      choices: [
        { name: '‚ùå –±–µ–∑ –æ–±–ª–∞—Å—Ç–∏', value: '' },
        ...config.scopes.map(scope => ({ name: scope, value: scope }))
      ]
    });
  }
  
  // –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
  questions.push({
    type: 'input',
    name: 'subject',
    message: '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π:',
    validate: (input) => {
      if (!input.trim()) {
        return '–û–ø–∏—Å–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
      }
      if (input.length > 50) {
        return '–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 50 —Å–∏–º–≤–æ–ª–æ–≤';
      }
      return true;
    }
  });
  
  // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
  questions.push({
    type: 'input',
    name: 'body',
    message: '–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):',
    filter: (input) => input.trim() || undefined
  });
  
  // –°—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–¥–∞—á–∏
  if (config.issuePrefix) {
    questions.push({
      type: 'input',
      name: 'issues',
      message: `–°—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–¥–∞—á–∏ (${config.issuePrefix}-123):`,
      filter: (input) => {
        if (!input.trim()) return undefined;
        return input.split(',').map(issue => issue.trim()).join(', ');
      }
    });
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  if (config.additionalQuestions) {
    questions.push(...config.additionalQuestions);
  }
  
  return inquirer.prompt(questions);
}

module.exports = {
  runCommit
}; 