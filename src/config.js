const path = require('path');
const fs = require('fs');

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ commit.config.js
 */
async function loadConfig() {
  const configPath = path.resolve(process.cwd(), 'commit.config.js');
  
  // –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const defaultConfig = {
    types: [
      { name: '‚ú® feat: –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è', value: 'feat' },
      { name: 'üêõ fix: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–≥–∞', value: 'fix' },
      { name: 'üìù docs: –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è', value: 'docs' },
      { name: 'üíÑ style: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞', value: 'style' },
      { name: '‚ôªÔ∏è refactor: —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥', value: 'refactor' },
      { name: '‚ö° perf: —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', value: 'perf' },
      { name: '‚úÖ test: —Ç–µ—Å—Ç—ã', value: 'test' },
      { name: 'üîß chore: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', value: 'chore' }
    ],
    scopes: [],
    issuePrefix: null,
    additionalQuestions: [],
    messageFormat: null,
    branchFormat: null
  };
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  if (fs.existsSync(configPath)) {
    try {
      const userConfig = require(configPath);
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      return {
        ...defaultConfig,
        ...userConfig,
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –º–∞—Å—Å–∏–≤–æ–≤
        types: userConfig.types || defaultConfig.types,
        scopes: userConfig.scopes || defaultConfig.scopes,
        additionalQuestions: userConfig.additionalQuestions || defaultConfig.additionalQuestions
      };
    } catch (error) {
      console.warn(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${error.message}`);
      return defaultConfig;
    }
  }
  
  return defaultConfig;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */
function createExampleConfig() {
  const exampleConfig = `module.exports = {
  // –¢–∏–ø—ã –∫–æ–º–º–∏—Ç–æ–≤ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é)
  types: [
    { name: '‚ú® feat: –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è', value: 'feat' },
    { name: 'üêõ fix: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–≥–∞', value: 'fix' },
    { name: 'üìù docs: –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è', value: 'docs' },
    { name: 'üíÑ style: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞', value: 'style' },
    { name: '‚ôªÔ∏è refactor: —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥', value: 'refactor' },
    { name: '‚ö° perf: —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', value: 'perf' },
    { name: '‚úÖ test: —Ç–µ—Å—Ç—ã', value: 'test' },
    { name: 'üîß chore: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', value: 'chore' }
  ],
  
  // –û–±–ª–∞—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  scopes: ['frontend', 'backend', 'api', 'ui', 'docs'],
  
  // –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∑–∞–¥–∞—á (–Ω–∞–ø—Ä–∏–º–µ—Ä, JIRA-123)
  issuePrefix: 'JIRA',
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  additionalQuestions: [
    {
      type: 'list',
      name: 'breaking',
      message: '–≠—Ç–æ breaking change?',
      choices: [
        { name: '–ù–µ—Ç', value: false },
        { name: '–î–∞', value: true }
      ]
    },
    {
      type: 'input',
      name: 'breakingDescription',
      message: '–û–ø–∏—à–∏—Ç–µ breaking change:',
      when: (answers) => answers.breaking,
      validate: (input) => {
        if (!input.trim()) {
          return '–û–ø–∏—Å–∞–Ω–∏–µ breaking change –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
        }
        return true;
      }
    }
  ],
  
  // –ö–∞—Å—Ç–æ–º–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  messageFormat: (answers, config, branch) => {
    let message = \`\${answers.type}\`;
    
    if (answers.scope) {
      message += \`(\${answers.scope})\`;
    }
    
    message += \`: \${answers.subject}\`;
    
    if (answers.body) {
      message += \`\\n\\n\${answers.body}\`;
    }
    
    if (answers.breaking) {
      message += \`\\n\\nBREAKING CHANGE: \${answers.breakingDescription}\`;
    }
    
    if (answers.issues) {
      message += \`\\n\\nCloses \${answers.issues}\`;
    }
    
    return message;
  },
  
  // –ö–∞—Å—Ç–æ–º–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  branchFormat: (branch) => {
    // –ü—Ä–∏–º–µ—Ä: –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–µ—Ç–∫–∏
    const match = branch.match(/(JIRA-\\d+)/);
    return match ? match[1] : null;
  }
};`;

  return exampleConfig;
}

module.exports = {
  loadConfig,
  createExampleConfig
}; 