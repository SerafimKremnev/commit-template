#!/bin/bash
# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Commitizen
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: curl -sSL url/setup-simple.sh | bash

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ

echo "üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Commitizen..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
if [ ! -d ".git" ]; then
    echo "‚ùå –û—à–∏–±–∫–∞: –≠—Ç–æ –Ω–µ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!"
    echo "–í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: git init"
    exit 1
fi

# 1. –°–æ–∑–¥–∞–µ–º .cz.toml –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ .cz.toml –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
cat > .cz.toml << 'EOF'
[tool.commitizen]
name = "cz_customize"
version = "0.1.0"
tag_format = "v$version"
update_changelog_on_bump = true
bump_message = "bump: version $current_version ‚Üí $new_version"
allow_abort = false

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ bump
bump_pattern = "^(feat|fix)"
bump_map = {feat = "MINOR", fix = "PATCH"}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ changelog
changelog_pattern = "^(feat|fix|docs|style|refactor|test|chore)/\\S+ \\| #\\d+ \\|"
change_type_order = ["feat", "fix", "refactor", "docs", "style", "test", "chore"]
change_type_map = {feat = "üöÄ –ù–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª", fix = "üêõ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–≥–æ–≤", refactor = "‚ôªÔ∏è –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥", docs = "üìù –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", style = "üé® –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è", test = "‚úÖ –¢–µ—Å—Ç—ã", chore = "üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞"}

[tool.commitizen.customize]
message_template = "{{task_type}}/{{branch_name}} | #{{aspro_id}} | {{description}}"
example = "feat/user-auth | #12345 | –¥–æ–±–∞–≤–ª–µ–Ω–∞ JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"

[[tool.commitizen.customize.questions]]
type = "list"
name = "task_type"
message = "üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:"
choices = [
    {value = "feat", name = "feat - –ù–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª"},
    {value = "fix", name = "fix - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–≥–∞"},
    {value = "docs", name = "docs - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"},
    {value = "style", name = "style - –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è"},
    {value = "refactor", name = "refactor - –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞"},
    {value = "test", name = "test - –¢–µ—Å—Ç—ã"},
    {value = "chore", name = "chore - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞"}
]

[[tool.commitizen.customize.questions]]
type = "input"
name = "branch_name"
message = "üåø –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏:"

[[tool.commitizen.customize.questions]]
type = "input"
name = "aspro_id"
message = "üî¢ –í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –≤ –ê—Å–ø—Ä–æ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):"

[[tool.commitizen.customize.questions]]
type = "input"
name = "description"
message = "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞):"
EOF

# 2. –°–æ–∑–¥–∞–µ–º git hook –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–º–º–∏—Ç–æ–≤
echo "üîí –°–æ–∑–¥–∞–Ω–∏–µ git hook –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ Husky
if [ -d ".husky" ]; then
    echo "üêï –û–±–Ω–∞—Ä—É–∂–µ–Ω Husky, —Å–æ–∑–¥–∞–µ–º .husky/commit-msg..."
    cat > .husky/commit-msg << 'EOF'
#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–º–º–∏—Ç–∞ –¥–ª—è Commitizen
commit_regex='^(feat|fix|docs|style|refactor|test|chore)(/.+)? \| #[0-9]+ \| .+'

if ! grep -qE "$commit_regex" "$1"; then
  echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É \"cz c\""
  echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: {–¢–∏–ø –∑–∞–¥–∞—á–∏}/{–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏} | #{ID –∑–∞–¥–∞—á–∏} | {–û–ø–∏—Å–∞–Ω–∏–µ}"
  echo "–ü—Ä–∏–º–µ—Ä: feat/auth | #123 | –î–æ–±–∞–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
  exit 1
fi
EOF
    chmod +x .husky/commit-msg
    echo "‚úÖ –°–æ–∑–¥–∞–Ω .husky/commit-msg –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–º–º–∏—Ç–æ–≤"
else
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π git hook
    cat > .git/hooks/commit-msg << 'EOF'
#!/bin/sh
# Git commit message template hook

commit_regex='^(feat|fix|docs|style|refactor|test|chore)(/.+)? \| #[0-9]+ \| .+'

if ! grep -qE "$commit_regex" "$1"; then
  echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É \"cz c\""
  echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: {–¢–∏–ø –∑–∞–¥–∞—á–∏}/{–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏} | #{ID –∑–∞–¥–∞—á–∏} | {–û–ø–∏—Å–∞–Ω–∏–µ}"
  echo "–ü—Ä–∏–º–µ—Ä: feat/auth | #123 | –î–æ–±–∞–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
  exit 1
fi
EOF
    chmod +x .git/hooks/commit-msg
    echo "‚úÖ –°–æ–∑–¥–∞–Ω .git/hooks/commit-msg –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–º–º–∏—Ç–æ–≤"
fi

# 3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É–º–Ω—ã–π –ø–µ—Ä–µ—Ö–≤–∞—Ç
echo "üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–º–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ git commit -m ‚Üí cz c..."

# –ü—Ä–æ—Å—Ç–æ–π –ª–æ–∫–∞–ª—å–Ω—ã–π git alias
git config alias.commit '!cz commit'

# –°–æ–∑–¥–∞–µ–º .git-commit-wrapper.sh –¥–ª—è shell —Ñ—É–Ω–∫—Ü–∏–∏
cat > .git-commit-wrapper.sh << 'EOF'
#!/bin/bash
# Wrapper –¥–ª—è git commit –≤ —ç—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–µ

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
PROJECT_ROOT="$(git rev-parse --show-toplevel 2>/dev/null)"
CURRENT_DIR="$(pwd)"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ —Ç–æ–º –∂–µ git –ø—Ä–æ–µ–∫—Ç–µ –≥–¥–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω wrapper
if [ "$PROJECT_ROOT" = "$CURRENT_DIR" ] || [[ "$CURRENT_DIR" == "$PROJECT_ROOT"* ]]; then
    # –ú—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ —Å Commitizen - –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º git commit
    if [ "$1" = "commit" ]; then
        if [ "$2" = "-m" ]; then
            echo "üöÄ –ü–µ—Ä–µ—Ö–≤–∞—Ç git commit -m ‚Üí cz c"
            echo "üí° –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∫–æ–º–º–∏—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: cz commit --message=\"$3\""
            cz c
        else
            echo "üöÄ –ü–µ—Ä–µ—Ö–≤–∞—Ç git commit ‚Üí cz commit"
            cz commit "${@:2}"
        fi
    else
        # –î–ª—è –¥—Ä—É–≥–∏—Ö git –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π git
        command git "$@"
    fi
else
    # –í–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ - –æ–±—ã—á–Ω—ã–π git
    command git "$@"
fi
EOF
chmod +x .git-commit-wrapper.sh

echo ""
echo "üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo ""
echo "üìã –ß—Ç–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ:"
echo "  ‚úÖ .cz.toml - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Commitizen"
if [ -d ".husky" ]; then
echo "  ‚úÖ .husky/commit-msg - –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–º–∏—Ç–æ–≤ (Husky)"
else
echo "  ‚úÖ .git/hooks/commit-msg - –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–º–∏—Ç–æ–≤"
fi
echo "  ‚úÖ git alias: git commit ‚Üí cz commit"
echo "  ‚úÖ .git-commit-wrapper.sh - —É–º–Ω—ã–π wrapper"
echo ""
echo "üöÄ –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
echo "  git add ."
echo "  git commit        # —Ç–µ–ø–µ—Ä—å –≤—ã–∑–æ–≤–µ—Ç cz commit"
echo "  cz c              # –∫–æ—Ä–æ—Ç–∫–∞—è –≤–µ—Ä—Å–∏—è"
echo ""
echo "üí° –î–ª—è shell wrapper –¥–æ–±–∞–≤—å—Ç–µ –≤ ~/.bashrc –∏–ª–∏ ~/.zshrc:"
echo "function git() { if [ -f \"\$(pwd)/.git-commit-wrapper.sh\" ]; then \"\$(pwd)/.git-commit-wrapper.sh\" \"\$@\"; else command git \"\$@\"; fi; }"
echo ""
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:"
echo "  cz info           # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
echo "  cz --version      # –í–µ—Ä—Å–∏—è Commitizen" 