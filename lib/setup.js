import fs from 'fs-extra';
import path from 'path';
import { execSync } from 'child_process';
import chalk from 'chalk';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export async function setupCommitTemplate(options) {
  const cwd = process.cwd();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
  if (!await isGitRepository(cwd)) {
    throw new Error('–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º. –í—ã–ø–æ–ª–Ω–∏—Ç–µ "git init" —Å–Ω–∞—á–∞–ª–∞.');
  }

  // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é commitizen
  await setupCommitizenConfig(cwd, options);
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º git hooks
  if (options.setupHooks) {
    await setupGitHooks(cwd);
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º commitizen –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if (options.installCommitizen) {
    await installCommitizen(cwd);
  }
  
  // –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –∫–æ–º–º–∏—Ç–∞
  await createCommitTemplate(cwd, options.templateType || 'default');
}

async function isGitRepository(dir) {
  try {
    execSync('git rev-parse --git-dir', { cwd: dir, stdio: 'ignore' });
    return true;
  } catch {
    return false;
  }
}

async function setupCommitizenConfig(cwd, options) {
  const packageJsonPath = path.join(cwd, 'package.json');
  let packageJson = {};
  
  // –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π package.json –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
  if (await fs.pathExists(packageJsonPath)) {
    packageJson = await fs.readJson(packageJsonPath);
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é commitizen
  packageJson.config = packageJson.config || {};
  packageJson.config.commitizen = {
    path: './cz-config.js'
  };
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã
  packageJson.scripts = packageJson.scripts || {};
  packageJson.scripts.commit = 'cz';
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
  packageJson.devDependencies = packageJson.devDependencies || {};
  if (options.installCommitizen) {
    packageJson.devDependencies.commitizen = '^4.3.0';
    packageJson.devDependencies['cz-customizable'] = '^7.0.0';
  }
  
  await fs.writeJson(packageJsonPath, packageJson, { spaces: 2 });
  console.log(chalk.green('üì¶ package.json –æ–±–Ω–æ–≤–ª–µ–Ω'));
}

async function setupGitHooks(cwd) {
  const hooksDir = path.join(cwd, '.git', 'hooks');
  const commitMsgHookPath = path.join(hooksDir, 'commit-msg');
  
  // –°–æ–∑–¥–∞–µ–º git hook –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–º–º–∏—Ç–æ–≤
  const hookContent = `#!/bin/sh
# Git commit message template hook
# –î–æ–±–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ commit-template CLI

commit_regex='^(feat|fix|docs|style|refactor|test|chore)(\/.+)? \\| #[0-9]+ \\| .+'

if ! grep -qE "$commit_regex" "$1"; then
  echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–∞!"
  echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: {–¢–∏–ø –∑–∞–¥–∞—á–∏}/{–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏} | #{ID –∑–∞–¥–∞—á–∏} | {–û–ø–∏—Å–∞–Ω–∏–µ}"
  echo "–ü—Ä–∏–º–µ—Ä: feat/auth | #123 | –î–æ–±–∞–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
  exit 1
fi`;

  await fs.ensureDir(hooksDir);
  await fs.writeFile(commitMsgHookPath, hookContent);
  await fs.chmod(commitMsgHookPath, '755');
  
  console.log(chalk.green('ü™ù Git hooks –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã'));
}

async function installCommitizen(cwd) {
  console.log(chalk.blue('üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Commitizen...'));
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ package.json
    const packageJsonPath = path.join(cwd, 'package.json');
    if (!await fs.pathExists(packageJsonPath)) {
      console.log(chalk.yellow('–°–æ–∑–¥–∞–Ω–∏–µ package.json...'));
      execSync('npm init -y', { cwd, stdio: 'inherit' });
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    execSync('npm install --save-dev commitizen cz-customizable', { 
      cwd, 
      stdio: 'inherit' 
    });
    
    console.log(chalk.green('‚úÖ Commitizen —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'));
  } catch (error) {
    console.log(chalk.yellow('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Commitizen –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'));
    console.log(chalk.yellow('–í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: npm install --save-dev commitizen cz-customizable'));
  }
}

async function createCommitTemplate(cwd, templateType) {
  const templatesDir = path.resolve(__dirname, '../templates');
  let templateFile;
  
  switch (templateType) {
    case 'custom':
      templateFile = path.join(cwd, 'cz-config.js');
      break;
    default:
      templateFile = path.join(templatesDir, 'default-cz-config.js');
  }
  
  const targetPath = path.join(cwd, 'cz-config.js');
  
  if (templateType === 'custom') {
    // –ö–∞—Å—Ç–æ–º–Ω—ã–π —à–∞–±–ª–æ–Ω —É–∂–µ —Å–æ–∑–¥–∞–Ω –≤ createCustomTemplate
    return;
  }
  
  // –ö–æ–ø–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω
  await fs.copy(templateFile, targetPath);
  console.log(chalk.green('üìù –®–∞–±–ª–æ–Ω –∫–æ–º–º–∏—Ç–∞ —Å–æ–∑–¥–∞–Ω: cz-config.js'));
} 