#!/usr/bin/env node

import { Command } from 'commander';
import chalk from 'chalk';
import inquirer from 'inquirer';
import { setupCommitTemplate } from '../lib/setup.js';
import { createCustomTemplate } from '../lib/template.js';

const program = new Command();

program
  .name('commit-template')
  .description('CLI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ git commit —à–∞–±–ª–æ–Ω–æ–≤')
  .version('1.0.0');

program
  .command('init')
  .description('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è git commit —à–∞–±–ª–æ–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏')
  .option('-t, --template <type>', '–¢–∏–ø —à–∞–±–ª–æ–Ω–∞ (default, custom)', 'default')
  .option('-s, --skip-prompts', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã')
  .action(async (options) => {
    try {
      console.log(chalk.blue('üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ git commit —à–∞–±–ª–æ–Ω–∞...'));
      
      if (!options.skipPrompts) {
        const answers = await inquirer.prompt([
          {
            type: 'list',
            name: 'templateType',
            message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —à–∞–±–ª–æ–Ω–∞:',
            choices: [
              { name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π ({–¢–∏–ø –∑–∞–¥–∞—á–∏}/{–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏} | #{ID –∑–∞–¥–∞—á–∏} | {–û–ø–∏—Å–∞–Ω–∏–µ})', value: 'default' },
              { name: '–ö–∞—Å—Ç–æ–º–Ω—ã–π (—Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —à–∞–±–ª–æ–Ω)', value: 'custom' }
            ],
            default: options.template
          },
          {
            type: 'confirm',
            name: 'setupHooks',
            message: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å git hooks –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞?',
            default: true
          },
          {
            type: 'confirm',
            name: 'installCommitizen',
            message: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Commitizen –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤?',
            default: true
          }
        ]);
        
        options = { ...options, ...answers };
      }

      if (options.templateType === 'custom') {
        await createCustomTemplate();
      }

      await setupCommitTemplate(options);
      
      console.log(chalk.green('‚úÖ Git commit —à–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!'));
      console.log(chalk.yellow('\nüìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:'));
      console.log('  git commit          - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ–º–º–∏—Ç —Å —à–∞–±–ª–æ–Ω–æ–º');
      console.log('  npx cz              - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–º–º–∏—Ç (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Commitizen)');
      console.log('  ct config           - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∞–±–ª–æ–Ω–∞');
      
    } catch (error) {
      console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞:'), error.message);
      process.exit(1);
    }
  });

program
  .command('config')
  .description('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞')
  .action(async () => {
    try {
      await createCustomTemplate();
      console.log(chalk.green('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!'));
    } catch (error) {
      console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞:'), error.message);
      process.exit(1);
    }
  });

program
  .command('remove')
  .description('–£–¥–∞–ª–µ–Ω–∏–µ git commit —à–∞–±–ª–æ–Ω–∞ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞')
  .action(async () => {
    const { confirm } = await inquirer.prompt([
      {
        type: 'confirm',
        name: 'confirm',
        message: '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å git commit —à–∞–±–ª–æ–Ω?',
        default: false
      }
    ]);

    if (confirm) {
      // TODO: implement removal logic
      console.log(chalk.green('‚úÖ Git commit —à–∞–±–ª–æ–Ω —É–¥–∞–ª–µ–Ω!'));
    }
  });

program.parse(); 